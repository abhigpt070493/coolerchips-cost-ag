from copy import copy


class Machine:

    def __init__(self, name_mach, price_mach, cost_inst, cost_maint, maint_downtime, mach_life, mach_life_unit,  laborfrac_cycle, area_floor_space, area_clearance,  elec_consume_rate,
                 length_workbed=None, width_workbed=None, height_workbed=None, time_setup=0, time_teardown=0, laborfrac_setup=0, laborfrac_teardown=0,
                 scrap_rate=0, part_accept_rate=1, time_heat=0, time_cool=0, laborfrac_heat=0, laborfrac_cool=0, consume_list=None, raw=None):

        """
        Initializes an object to hold attributes of a machine used in a process step.

        Parameters
        ----------
        name_mach: str
            Name of the machine.

        price_mach: float or int
            Price of machine.

        cost_inst: float or int
            Price of installation.

        cost_maint: float or int
            Annual cost_functions of maintenance or price of annual service contract.

        maint_downtime: float or int, optional
            Annual hours of machine downtime for maintenance & repair activities.

        mach_life: float or int
            Expected machine life in years.

        length_workbed: float or int
            Length (meters) of machine working area.

        width_workbed: float or int
            Width (meters) of machine working area.

        height_workbed: float or int
            Height (meters) of machine working area.

        time_setup: float or int
            Time (hrs) required to set up machine and place parts(s) in machine before each machine run.

        time_teardown: float or int
            Time (hrs) required to remove parts(s) from machine and prep parts(s) for next process step after each machine
            run.

        laborfrac_setup: float or int
            Fraction of time_setup requiring human labor or monitoring. Values must be in [0,1].

        laborfrac_teardown: float or int
            Fraction of time_teardown requiring human labor or monitoring. Values must be in [0,1].

        laborfrac_cycle: float or int
            Fraction of time that machine is running requiring human labor or monitoring. Values must be in [0,1].
            Cycle time is defined in ProcessStep attributes.

        area_floor_space: float or int
            Floor space (m^2) required for machine.

        area_clearance: float or int
            Clearance and working area space (m^2) required around machine.

        scrap_rate: float or int
            Amount of scrap generated by each machine run. Value is used in cost_material function as a multiplier of
            amount of material used in each parts.

        part_accept_rate: float
            Fraction of parts processed by machine that are defect-free. Values must be in [0,1].

        elec_consume_rate: float or int
            Electricity usage rate (kW) (i.e., power consumption) during machine run.

        time_heat: float or int
            Time (hrs) required for pre-heating or heat-up of machine before or at beginning of a machine run.

        time_cool: float or int
            Time (hrs) required for cooldown of machine after a machine run.

        laborfrac_heat: float
            Fraction of time_heat requiring human labor or monitoring. Values must be in [0,1].

        laborfrac_cool: float
            Fraction of time_cool requiring human labor or monitoring. Values must be in [0,1].

        consume_list: dict
            Dictionary of Consumables objects to capture consumable materials associated with the machine.

        raw: dict
            Dictionary of raw data for objects created from an external data file.
        """

        self.name_mach = name_mach
        self.price_mach = price_mach
        self.cost_inst = cost_inst
        self.cost_maint = cost_maint
        self.maint_downtime = maint_downtime
        self.mach_life = mach_life
        self.mach_life_unit = mach_life_unit
        self.length_workbed = length_workbed
        self.width_workbed = width_workbed
        self.height_workbed = height_workbed
        self.time_setup = time_setup
        self.time_teardown = time_teardown
        self.laborfrac_setup = laborfrac_setup
        self.laborfrac_teardown = laborfrac_teardown
        self.laborfrac_cycle = laborfrac_cycle
        self.area_floor_space = area_floor_space
        self.area_clearance = area_clearance
        self.area_floor_space_tot = area_floor_space + area_clearance
        self.scrap_rate = scrap_rate
        self.part_accept_rate = part_accept_rate
        self.elec_consume_rate = elec_consume_rate
        self.time_heat = time_heat
        self.time_cool = time_cool
        self.laborfrac_heat = laborfrac_heat
        self.laborfrac_cool = laborfrac_cool
        self.consume_list = consume_list or {}
        self.raw = raw

    def copy(self, **kwargs) -> "Machine":
        """Creates a copy of the object, updates attributes for specified kwargs, and returns updated object."""

        res = copy(self)
        for k, v in kwargs.items():
            setattr(res, k, v)
        return res

    def add_consumables(self, consumables: dict):
        """
        Creates a list of consumables associated with a Machine object from a broader list of Consumables objects.

        Parameters
        ----------
        consumables: dict
            Dictionary of Consumables objects.
        """
        self.consume_list = {}
        for k, v in consumables.items():
            if v.name_mach == self.name_mach:
                self.consume_list[k] = v
            else:
                continue
        return self

    def calc_mach_life(self, parts_vol: int):
        if self.mach_life_unit == "parts":
            self.mach_life = self.mach_life*1.00/parts_vol
        else:
            self.mach_life = self.mach_life


    def create_variant(self, attributes_to_modify, percentage):
        """
        Creates a new ProcessStep instance by adjusting specified attributes by a given percentage.

        :param attributes_to_modify: List of attribute names to modify.
        :param percentage: Percentage to adjust the attributes (positive for increase, negative for decrease).
        :return: A new ProcessStep instance with adjusted attributes.
        """
        # Create a copy of the current instance's attributes
        new_attributes = vars(self).copy()

        # Adjust the specified attributes by the given percentage
        for attr in attributes_to_modify:
            if attr in new_attributes:
                original_value = new_attributes[attr]
                if isinstance(original_value, (int, float)):
                    adjustment = original_value * (percentage / 100)
                    new_attributes[attr] = original_value + adjustment
                else:
                    raise ValueError(f"Attribute '{attr}' is not numeric and cannot be adjusted by percentage.")
            else:
                raise AttributeError(f"Attribute '{attr}' does not exist in the ProcessStep class.")

        # Create a new ProcessStep instance with the adjusted attributes
        return Machine(**new_attributes)
